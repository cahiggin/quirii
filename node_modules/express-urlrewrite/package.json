{
  "name": "express-urlrewrite",
  "description": "URL rewrite middleware for express",
  "repository": {
    "type": "git",
    "url": "git://github.com/kapouer/express-urlrewrite"
  },
  "version": "1.0.0",
  "keywords": [
    "express",
    "middleware",
    "rewrite",
    "redirect",
    "url"
  ],
  "files": [
    "index.js"
  ],
  "license": "MIT",
  "dependencies": {
    "debug": "*",
    "path-to-regexp": "0.0.2"
  },
  "readme": "express-urlrewrite\n==================\n\nURL rewrite middleware for express.\n\n\n## Examples\n\nRewrite using a regular expression, rewriting `/i123` to `/items/123`.\n\n```js\napp.use(rewrite(/^\\/i(\\w+)/, '/items/$1'));\n```\n\nRewrite using route parameters, references may be named\nor numeric. For example rewrite `/foo..bar` to `/commits/foo/to/bar`:\n\n```js\napp.use(rewrite('/:src..:dst', '/commits/$1/to/$2'));\napp.use(rewrite('/:src..:dst', '/commits/:src/to/:dst'));\n```\n\nYou may also use the wildcard `*` to soak up several segments,\nfor example `/js/vendor/jquery.js` would become\n`/public/assets/js/vendor/jquery.js`:\n\n```js\napp.use(rewrite('/js/*', '/public/assets/js/$1'));\n```\n\nIn the above examples, the query string (if any) is left untouched.\nThe regular expression is applied to the full url, so the query string\ncan be modified as well:\n\n```js\napp.use(rewrite('/file\\\\?param=:param', '/file/:param'))\n```\n\nThe query string delimiter (?) must be escaped for the regular expression\nto work.\n\n## Debugging\n\nSet environment variable `DEBUG=express-urlrewrite`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kapouer/express-urlrewrite/issues"
  },
  "_id": "express-urlrewrite@1.0.0",
  "dist": {
    "shasum": "03ba1ba7ae561d6b94cb14e1cb5ef2fe8d434de9"
  },
  "_from": "express-urlrewrite@",
  "_resolved": "https://registry.npmjs.org/express-urlrewrite/-/express-urlrewrite-1.0.0.tgz"
}
